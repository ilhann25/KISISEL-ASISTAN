from flask import Flask, redirect, request, session, jsonify, render_template
import requests
import base64

# Flask uygulamasını başlat
app = Flask(__name__)
app.secret_key = 'your_secret_key'  # Güvenli bir secret key kullan

# Spotify API kimlik bilgileri
client_id = '509bf2ef5dfb415393b22a0c37d5a821'
client_secret = '5cf0c1e8329740f6828d57b2349719f3'
redirect_uri = 'http://localhost:8080/spotify_callback'  # Spotify'daki yönlendirme URI ile aynı olmalı

# Spotify yetkilendirme URL'si
auth_url = "https://accounts.spotify.com/authorize"
token_url = "https://accounts.spotify.com/api/token"
user_profile_url = "https://api.spotify.com/v1/me"


def get_spotify_auth_url():
    """
    Spotify yetkilendirme URL'sini oluşturur ve geri döner.
    """
    scope = "user-read-private user-read-email"  # İzinler (scope)
    auth_params = {
        "client_id": client_id,
        "response_type": "code",
        "redirect_uri": redirect_uri,
        "scope": scope
    }
    # Parametreleri yetkilendirme URL'sine ekler ve geri döner
    auth_request_url = f"{auth_url}?client_id={client_id}&response_type=code&redirect_uri={redirect_uri}&scope={scope}"
    return auth_request_url


def get_access_token(auth_code):
    """
    Spotify API'den erişim token'ı alır.
    """
    auth_header = base64.b64encode(f"{client_id}:{client_secret}".encode()).decode('ascii')
    
    token_data = {
        'grant_type': 'authorization_code',
        'code': auth_code,
        'redirect_uri': redirect_uri
    }

    headers = {
        'Authorization': f'Basic {auth_header}',
        'Content-Type': 'application/x-www-form-urlencoded'
    }

    # Spotify token endpoint'e POST isteği gönder
    response = requests.post(token_url, data=token_data, headers=headers)
    
    # Yanıtı JSON olarak döndür
    return response.json()


def get_user_profile(access_token):
    """
    Kullanıcının Spotify profilini alır.
    """
    headers = {
        'Authorization': f'Bearer {access_token}'
    }
    # Kullanıcı profili endpoint'e GET isteği gönder
    response = requests.get(user_profile_url, headers=headers)
    return response.json()


@app.route('/')
def index():
    """
    Anasayfa rotası: Kullanıcıyı Spotify'a yönlendirir.
    """
    auth_request_url = get_spotify_auth_url()  # Yetkilendirme URL'sini al
    return redirect(auth_request_url)  # Kullanıcıyı bu URL'ye yönlendir


@app.route('/spotify_callback')
def spotify_callback():
    auth_code = request.args.get('code')

    # Yetkilendirme kodunu kullanarak erişim token'ı al
    token_response = get_access_token(auth_code)

    if 'access_token' in token_response:
        access_token = token_response['access_token']
        session['access_token'] = access_token  # Erişim token'ını oturumda sakla

        # Erişim token'ını kullanarak kullanıcının profilini al
        user_profile = get_user_profile(access_token)

        # Profil bilgilerini user_profile.html dosyasına gönder
        return render_template('user_profile.html', user=user_profile)
    else:
        return "Error in getting access token", 400


@app.route('/recommendations')
def recommendations():
    """
    Kullanıcıya öneriler sunmak için bir rota.
    """
    access_token = session.get('access_token')
    if access_token:
        recommendations_url = "https://api.spotify.com/v1/recommendations"
        params = {
            "seed_genres": "pop",  # Öneri için başlangıç türü
            "limit": 5  # Kaç öneri almak istediğin
        }
        headers = {
            'Authorization': f'Bearer {access_token}'
        }

        # Öneri almak için GET isteği gönder
        response = requests.get(recommendations_url, headers=headers, params=params)

        if response.status_code == 200:
            recommendations_data = response.json()
            tracks = recommendations_data.get("tracks", [])
            
            # Şarkı bilgilerini işleme
            result = []
            for track in tracks:
                track_info = {
                    "name": track["name"],
                    "artist": track["artists"][0]["name"],  # İlk sanatçıyı al
                    "album": track["album"]["name"],
                    "url": track["external_urls"]["spotify"]  # Spotify URL'si
                }
                result.append(track_info)

            return jsonify(result)  # Öneri verisini JSON olarak döndür
        else:
            return jsonify({"error": "Failed to get recommendations"}), response.status_code
    
    return redirect('/')



if __name__ == '__main__':
    app.run(debug=True, port=8080) 
